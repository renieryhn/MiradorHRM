@using Newtonsoft.Json
@model PlanillaPM.Models.InicioFiltros


@{
    ViewData["Title"] = "Home Page";

    var colors = new[] { "#1797C0", "#0073b7", "#00c0ef", "#f39c12", "#f56954", "#00a65a", "#FF5733", "#C70039", "#900C3F", "#581845" };
    var colors2 = new[] { "#1797C0", "#ff6384" }; // Azul y rosa
    var colors3 = new[] { "#1797C0", "#0073b7", "#00c0ef", "#f39c12", "#f56954", "#00a65a" };
    var ubicaciones = Model.EmpleadosPorUbicacion.Keys.ToList();
    var cantidades = Model.EmpleadosPorUbicacion.Values.ToList();

    var hasData = Model.EmpleadosPorUbicacion != null && Model.EmpleadosPorUbicacion.Any();

    var totalHombres = Model.TotalHombres;
    var totalMujeres = Model.TotalMujeres;
    var hasDataMF = totalHombres > 0 || totalMujeres > 0;

    var empleadosPorDepartamento = Model.EmpleadoDepartamento;
    var hasDataDept = empleadosPorDepartamento != null && empleadosPorDepartamento.Any();

}


<style>
    .icon-custom-color {
        color: #D9D9D9;
        transition: color 0.3s;
        display: block;
    }

    .icon-container:hover .icon-custom-color {
        color: #1797C0;
    }

    .users-list-name {
        display: block;
        text-align: center;
        margin-top: 8px;
        color: #D9D9D9;
        transition: color 0.3s;
        font-weight: bold;
    }

    .icon-container:hover .users-list-name {
        color: #1797C0;
    }

    .icon-container {
        text-align: center;
        list-style: none;
        padding: 0;
        margin: 20px;
    }

    .icon-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .icon-list {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        padding: 0;
    }

    .card-custom {
        border-top: 3px solid #1797C0; 
    }
</style>
<script src="~/plugins/chart.js/chart.bundle.min.js"></script>
<script src="~/plugins/chart.js/chart.bundle.js"></script>
<script src="~/plugins/chart.js/chart.min.js"></script>
<script src="~/plugins/chart.js/chart.js"></script>

<div class="container-flui">
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">Dashboard - Recursos Humanos</h1>
                </div>

            </div>
        </div>
    </div>
    <section class="content">
        <div class="container-fluid">


            <div class="row">
                <div class="col-lg-3 col-6">
                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Empleados Registrados</h7>
                                <h3>@Model.CantidadEmpleados</h3>
                            </div>
                            <div class="icon">
                                <i class="fas fa-users"></i> <!-- Icono de usuarios -->
                            </div>
                        </div>
                    </div><!-- /.card -->
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">

                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Perfiles completados</h7>
                                <h3>@Model.CantidadPerfilesCompletos<sup style="font-size: 20px">%</sup></h3>
                            </div>
                            <div class="icon">
                                <i class="fas fa-check-circle"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">

                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Usuarios Registrados</h7>
                                <h3>@Model.CantidadUsuarios</h3>
                            </div>
                            <div class="icon">
                                <i class="fas fa-users"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">

                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Puestos de Trabajo</h7>
                                <h3>@Model.CantidadCargos</h3>
                            </div>
                            <div class="icon">
                                <i class="fas fa-briefcase"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
            </div>
            <!-- /.row -->
            <div class="row">
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">Próximos  Cumpleañeros</h3>
                           
                        </div>
                        <div class="card-body table-responsive p-0">
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th>Nombre Completo</th>
                                        <th>Fecha Nacimiento</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.ProximosCumpleañeros == null || !Model.ProximosCumpleañeros.Any())
                                {
                                    <tr>
                                        <td colspan="2" class="text-center">No hay datos disponibles</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var empleado in Model.ProximosCumpleañeros)
                                    {
                                        <tr>
                                            <td>@Html.DisplayFor(modelItem => empleado.NombreCompleto)</td>
                                            <td>
                                                @{
                                                    // Obtener la fecha de nacimiento del empleado y convertirla a DateTime?
                                                    DateTime? fechaNacimiento = empleado.FechaNacimiento.ToDateTime(TimeOnly.MinValue);

                                                    if (fechaNacimiento.HasValue)
                                                    {
                                                        // Calcular la diferencia en días entre la fecha de nacimiento y la fecha actual
                                                        int diasRestantes = (fechaNacimiento.Value.AddYears(DateTime.Today.Year - fechaNacimiento.Value.Year) - DateTime.Today).Days;

                                                        // Determinar el tipo de etiqueta de advertencia según los días restantes
                                                        string claseEtiqueta = "";
                                                        string etiqueta = "";
                                                        if (diasRestantes <= 5)
                                                        {
                                                            claseEtiqueta = "badge bg-danger";
                                                            etiqueta = "Clumpleañero";
                                                        }
                                                        else if (diasRestantes <= 10)
                                                        {
                                                            claseEtiqueta = "badge bg-warning";
                                                            etiqueta = "Próximo";
                                                        }
                                                        else if (diasRestantes <= 20)
                                                        {
                                                            claseEtiqueta = "badge bg-info";
                                                            etiqueta = "Importante";
                                                        }
                                                        else
                                                        {
                                                            claseEtiqueta = "badge bg-success";
                                                            etiqueta = "Normal";
                                                        }

                                                        // Mostrar la etiqueta de advertencia y la fecha de nacimiento
                                                        <span class="@claseEtiqueta">@etiqueta</span> @fechaNacimiento.Value.ToShortDateString()
                                                    }
                                                }
                                            </td>
                                        </tr>
                                    }
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">Licencias por Vencer</h3>                         
                        </div>
                        <div class="card-body table-responsive p-0">
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th>Nombre Completo</th>
                                        <th>Numero Licencia</th>
                                        <th>Fecha de Vencimiento</th>
                                    </tr>
                                </thead>
                                <tbody>
                                     @if (Model.LicenciasPorVencer == null || !Model.LicenciasPorVencer.Any())
                                {
                                    <tr>
                                        <td colspan="3" class="text-center">No hay datos disponibles</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var empleado in Model.LicenciasPorVencer)
                                    {
                                        <tr>
                                            <td>@Html.DisplayFor(modelItem => empleado.NombreCompleto)</td>
                                            <td>@Html.DisplayFor(modelItem => empleado.NumeroLicencia)</td>
                                            <td>
                                                @{
                                                    // Convertir empleado.FechaVencimientoLicencia a DateTime antes de la resta
                                                    DateTime fechaVencimiento = empleado.FechaVencimientoLicencia.HasValue ? new DateTime(empleado.FechaVencimientoLicencia.Value.Year, empleado.FechaVencimientoLicencia.Value.Month, empleado.FechaVencimientoLicencia.Value.Day) : DateTime.MinValue;

                                                    // Calcular la diferencia en días entre la fecha de vencimiento y la fecha actual
                                                    int diasRestantes = (fechaVencimiento - DateTime.Today).Days;

                                                    // Determinar qué etiqueta de advertencia mostrar en función de los días restantes
                                                    string etiqueta = string.Empty;
                                                    string claseEtiqueta = string.Empty;
                                                    if (diasRestantes <= 10)
                                                    {
                                                        etiqueta = "Urgente";
                                                        claseEtiqueta = "badge bg-danger";
                                                    }
                                                    else if (diasRestantes <= 20)
                                                    {
                                                        etiqueta = "Importante";
                                                        claseEtiqueta = "badge bg-warning";
                                                    }
                                                    else if (diasRestantes <= 30)
                                                    {
                                                        etiqueta = "Próximo";
                                                        claseEtiqueta = "badge bg-info";
                                                    }
                                                }

                                                <!-- Mostrar la etiqueta de advertencia -->
                                                <span class="badge @claseEtiqueta">@etiqueta</span>

                                                <!-- Mostrar la fecha de vencimiento -->
                                                @Html.DisplayFor(modelItem => empleado.FechaVencimientoLicencia)
                                            </td>

                                        </tr>
                                    }
                                 }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
               

            </div>
            <div class="row">
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">Ausencias</h3>
                        </div>
                        <div class="card-body table-responsive p-0">
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th>Nombre Completo</th>
                                        <th>Motivo</th>
                                        <th>Fecha Desde</th>
                                        <th>Fecha Hasta</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.EmpleadoAusencias == null || !Model.EmpleadoAusencias.Any())
                                {
                                    <tr>
                                        <td colspan="5" class="text-center">No hay datos disponibles</td>
                                    </tr>
                                }
                                else
                                {
                                    @foreach (var empleado in Model.EmpleadoAusencias)
                                    {
                                        <tr>
                                            <td>@Html.DisplayFor(modelItem => empleado.IdEmpleadoNavigation.NombreCompleto)</td>
                                            <td>@Html.DisplayFor(modelItem => empleado.IdTipoAusenciaNavigation.NombreTipoAusencia)</td>
                                            <td>@Html.DisplayFor(modelItem => empleado.FechaDesde)</td>
                                            <td>@Html.DisplayFor(modelItem => empleado.FechaHasta)</td>
                                            <td>
                                                <div class="btn-group">
                                                    <button type="button" class="btn btn-primary btn-sm dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                                        Acciones
                                                    </button>
                                                    <div class="dropdown-menu">
                                                        <button class="dropdown-item" onclick="actualizarEstado(@empleado.IdEmpleadoAusencia, 2)">
                                                            <i class="fas fa-check-circle mr-1 text-success"></i> Aprobar
                                                        </button>
                                                        <button class="dropdown-item" onclick="actualizarEstado(@empleado.IdEmpleadoAusencia, 3)">
                                                            <i class="fas fa-times-circle mr-1 text-danger"></i> Rechazar
                                                        </button>
                                                    </div>
                                                </div>
                                            </td>




                                        </tr>
                                    }
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">Contratos por Vencer</h3>

                        </div>
                        <div class="card-body table-responsive p-0">
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th>Nombre Completo</th>
                                        <th>Tipo de contrato</th>
                                        <th>Fecha de Vencimiento</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.ContratosPorVencer == null || !Model.ContratosPorVencer.Any())
                                    {
                                        <tr>
                                            <td colspan="3" class="text-center">No hay datos disponibles</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var contrato in Model.ContratosPorVencer)
                                        {
                                            <tr>
                                                @if (contrato.IdEmpleadoNavigation != null)
                                                {
                                                    <td>@Html.DisplayFor(modelItem => contrato.IdEmpleadoNavigation.NombreCompleto)</td>
                                                }
                                                @if (contrato.IdTipoContratoNavigation != null)
                                                {
                                                    <td>@Html.DisplayFor(modelItem => contrato.IdTipoContratoNavigation.NombreTipoContrato)</td>
                                                }
                                                <td>
                                                    @{
                                                        // Crear un nuevo objeto DateTime usando el año, mes y día de la fecha de vencimiento del contrato
                                                        DateTime fechaVencimiento = new DateTime(contrato.FechaFin.Year, contrato.FechaFin.Month, contrato.FechaFin.Day);

                                                        // Calcular la diferencia en días entre la fecha de vencimiento del contrato y la fecha actual
                                                        int diasRestantes = (fechaVencimiento - DateTime.Today).Days;


                                                        // Determinar qué etiqueta de advertencia mostrar en función de los días restantes
                                                        string etiqueta = string.Empty;
                                                        string claseEtiqueta = string.Empty;
                                                        if (diasRestantes <= 10)
                                                        {
                                                            etiqueta = "Urgente";
                                                            claseEtiqueta = "badge bg-danger";
                                                        }
                                                        else if (diasRestantes <= 20)
                                                        {
                                                            etiqueta = "Importante";
                                                            claseEtiqueta = "badge bg-warning";
                                                        }
                                                        else if (diasRestantes <= 30)
                                                        {
                                                            etiqueta = "Próximo";
                                                            claseEtiqueta = "badge bg-info";
                                                        }
                                                    }

                                                    <!-- Mostrar la etiqueta de advertencia -->
                                                    <span class="badge @claseEtiqueta">@etiqueta</span>

                                                    <!-- Mostrar la fecha de vencimiento del contrato -->
                                                    @Html.DisplayFor(modelItem => contrato.FechaFin)
                                                </td>
                                            </tr>
                                        }
                                    }

                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
               

            </div>
            <!-- Main row -->
            <div class="row">
                <div class="col-md-6">

                    <div class="card card-custom card-outline">
                        <div class="card-header">
                            <h3 class="card-title">

                                Accesos Directos
                            </h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                            </div>
                        </div>


                        <ul class="icon-list">
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="EmpleadoContacto" asp-action="Index">
                                        <i class="fas fa-exclamation-circle fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Contacto de Emergencia</span>
                                </div>
                            </li>
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="EmpleadoAusencium" asp-action="Index">
                                        <i class="fas fa-user-times fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Ausencia</span>
                                </div>
                            </li>
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="EmpleadoContacto" asp-action="Index">
                                        <i class="fas fa-file-contract fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Contratos</span>
                                </div>
                            </li>
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="Empleado" asp-action="Index">
                                        <i class="fas fa-user fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Empleado</span>
                                </div>
                            </li>


                        </ul>
                        <!-- /.users-list -->
                    </div>

                </div>

                <section class="col-lg-6 connectedSortable">
                    <div class="card card-custom card-outline">
                        <div class="card-header">

                            <h3 class="card-title">
                                <i class="far fa-chart-bar"></i>
                                Cantidad de Hombres y Mujeres
                            </h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (hasDataMF)
                            {
                                <canvas id="pieChart" style="min-height: 300px; height: 300px; max-height: 300px; max-width: 100%;"></canvas>
                            }
                            else
                            {
                                <p>Aún no hay datos disponibles</p>
                            }
                        </div>
                    </div>
                </section>

              

            </div>

            <div class="row">
                <section class="col-lg-6 connectedSortable">
                    <!-- PIE CHART -->
                    <div class="card card-custom card-outline">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="far fa-chart-bar"></i>
                                Empleados por Departamento
                            </h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (hasDataDept)
                            {
                                <canvas id="pieChart3" style="min-height: 300px; height: 300px; max-height: 300px; max-width: 100%;"></canvas>
                            }
                            else
                            {
                                <p>Aún no hay datos disponibles</p>
                            }
                        </div>
                        <!-- /.card-body-->
                    </div>
                </section>
                <section class="col-lg-6 connectedSortable">
                    <div class="card card-custom card-outline">
                        <div class="card-header">
                            <h3 class="card-title">
                                <i class="far fa-chart-bar"></i>
                                Empleados por Ubicación
                            </h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            @if (hasData)
                            {
                                <canvas id="pieChart2" style="min-height: 300px; height: 300px; max-height: 300px; max-width: 100%;"></canvas>
                            }
                            else
                            {
                                <p>Aún no hay datos disponibles</p>
                            }
                        </div>
                    </div>
                </section>
            </div>

        </div>
        <!-- /.row (main row) -->


    </section>
</div>


@section scripts {
    <script>


        function actualizarEstado(id, nuevoEstado) {
            if (confirm('¿Está seguro que desea cambiar el estado de esta ausencia?')) {
                $.ajax({
                    url: '@Url.Action("ActualizarEstado", "Home")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ Id: id, NuevoEstado: nuevoEstado }),
                    headers: {
                        'RequestVerificationToken': $('input:hidden[name="__RequestVerificationToken"]').val()
                    },
                    success: function (response) {
                        if (response.success) {
                            toastr.success(response.message);
                            location.reload(); // Refrescar la página
                        } else {
                            toastr.error(response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        toastr.error('Error al actualizar el estado: ' + error);
                    }
                });
            }
        }


        $(document).ready(function () {

            var hasDataMF = @hasDataMF.ToString().ToLower();
            if (hasDataMF) {
                // Datos para el gráfico de pie M/F
                var pieData = {
                    labels: ['Hombres', 'Mujeres'],
                    datasets: [{
                        label: 'Cantidad de Personas por Sexo',
                        data: [@Model.TotalHombres, @Model.TotalMujeres],
                        backgroundColor: @Html.Raw(JsonConvert.SerializeObject(colors2)),
                        borderColor: @Html.Raw(JsonConvert.SerializeObject(colors2)),
                        borderWidth: 1
                    }]
                };

                var pieOptions = {
                    maintainAspectRatio: false,
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Distribución por Sexo'
                        }
                    }
                };

                var pieChartCanvas = document.getElementById('pieChart').getContext('2d');
                new Chart(pieChartCanvas, {
                    type: 'pie',
                    data: pieData,
                    options: pieOptions
                });
            }

            var hasData = @hasData.ToString().ToLower();
            if (hasData) {
                // Datos para el gráfico de pie ubicacion
                var pieData2 = {
                    labels: @Html.Raw(JsonConvert.SerializeObject(@Model.EmpleadosPorUbicacion.Keys)),
                    datasets: [{
                        label: 'Empleados por Ubicación',
                        data: @Html.Raw(JsonConvert.SerializeObject(@Model.EmpleadosPorUbicacion.Values)),
                        backgroundColor: @Html.Raw(JsonConvert.SerializeObject(colors3)),
                        borderColor: @Html.Raw(JsonConvert.SerializeObject(colors3)),
                        borderWidth: 1
                    }]
                };

                var pieChartCanvas2 = document.getElementById('pieChart2').getContext('2d');
                new Chart(pieChartCanvas2, {
                    type: 'pie',
                    data: pieData2,
                    options: pieOptions
                });
            }

            var hasDataDept = @hasDataDept.ToString().ToLower();
            if (hasDataDept) {
                // Datos para el gráfico de pie departamentos
                var pieData3 = {
                    labels: @Html.Raw(JsonConvert.SerializeObject(@Model.EmpleadoDepartamento.Select(d => d.NombreDepartamento))),
                    datasets: [{
                        label: 'Empleados por Departamento',
                        data: @Html.Raw(JsonConvert.SerializeObject(@Model.EmpleadoDepartamento.Select(d => d.Count))),
                        backgroundColor: @Html.Raw(JsonConvert.SerializeObject(colors)),
                        borderColor: @Html.Raw(JsonConvert.SerializeObject(colors)),
                        borderWidth: 1
                    }]
                };

                var pieOptions = {
                    maintainAspectRatio: false,
                    responsive: true,
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        title: {
                            display: true,
                            text: 'Distribución por Departamento'
                        }
                    }
                };

                var pieChartCanvas3 = document.getElementById('pieChart3').getContext('2d');
                new Chart(pieChartCanvas3, {
                    type: 'pie',
                    data: pieData3,
                    options: pieOptions
                });
            }
        });






    </script>
}



