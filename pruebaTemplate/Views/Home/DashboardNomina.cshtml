
@model PlanillaPM.Models.NominaTotales
@using Newtonsoft.Json

@{
    ViewData["Title"] = "Nomina Dashboard";
    var hasNominasData = ViewBag.NominasData != null && ViewBag.NominasData.Count > 0;
}

<style>
    .icon-custom-color {
        color: #D9D9D9;
        transition: color 0.3s;
        display: block;
    }

    .icon-container:hover .icon-custom-color {
        color: #1797C0;
    }

    .users-list-name {
        display: block;
        text-align: center;
        margin-top: 8px;
        color: #D9D9D9;
        transition: color 0.3s;
        font-weight: bold;
    }

    .icon-container:hover .users-list-name {
        color: #1797C0;
    }

    .icon-container {
        text-align: center;
        list-style: none;
        padding: 0;
        margin: 20px;
    }

    .icon-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    .icon-list {
        display: flex;
        justify-content: space-around;
        flex-wrap: wrap;
        padding: 0;
    }

    .card-custom {
        border-top: 3px solid #1797C0;
    }
</style>


<div class="container-flui">
    <div class="content-header">
        <div class="container-fluid">
            <div class="row mb-2">
                <div class="col-sm-6">
                    <h1 class="m-0">Dashboard - Nomina de Empleado</h1>
                </div>

            </div>
        </div>
    </div>
    <section class="content">
        <div class="container-fluid">
            <div class="row">
                <div class="col-lg-3 col-6">
                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Total de Ingresos</h7>
                                <h4> <strong>@Model.TotalIngresos.ToString("N2")</strong> </h4>
                            </div>
                            <div class="icon">
                                <i class="fas fa-coins"></i> 
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">

                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Total de Impuestos</h7>
                                <h4><strong>@Model.TotalImpuestos.ToString("N2")<sup style="font-size: 17px">%</sup></strong></h4>
                            </div>
                            <div class="icon">
                                <i class="fas fa-receipt"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">
                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Total Empleados de Nomina</h7>
                                <h4><strong>@Model.TotalEmpleadosEnNomina.ToString("N2")</strong></h4>
                            </div>
                            <div class="icon">
                                <i class="fas fa-file-invoice"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
                <div class="col-lg-3 col-6">

                    <div class="card card-primary card-outline small-box">
                        <div class="card-body">
                            <div class="inner">
                                <h7>Total Deducciones</h7>
                                <h4> <strong>@Model.TotalDeducciones.ToString("N2")</strong> </h4>
                            </div>
                            <div class="icon">
                                <i class="fas fa-percentage"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ./col -->
            </div>
            <div class="row">
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">Solicitud de Vacaciones</h3>
                        </div>
                        <div class="card-body table-responsive p-0">
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th style="display: none;">idVacacion</th>
                                        <th>Nombre Completo</th>                                     
                                        <th>Fecha Inicio</th>
                                        <th>Fecha Fin</th>
                                        <th>Dias Solicitados</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.VacacionDetalle == null || !Model.VacacionDetalle.Any())
                                    {
                                        <tr>
                                            <td colspan="5" class="text-center">No hay datos disponibles</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var empleado in Model.VacacionDetalle)
                                        {
                                            <tr>
                                                <td style="display: none;">@Html.DisplayFor(modelItem => empleado.IdVacacion)</td>
                                                <td>@Html.DisplayFor(modelItem => empleado.IdEmpleadoNavigation.NombreCompleto)</td>
                                                <td>@Html.DisplayFor(modelItem => empleado.FechaInicio)</td>
                                                <td>@Html.DisplayFor(modelItem => empleado.FechaFin)</td>
                                                <td>@Html.DisplayFor(modelItem => empleado.NumeroDiasSolicitados)</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm"
                                                            data-idvacacion="@empleado.IdVacacion"
                                                            data-id="@empleado.IdVacacionDetalle"
                                                            data-nombre="@empleado.IdEmpleadoNavigation.NombreCompleto"
                                                            data-fechainicio="@empleado.FechaInicio.ToString("yyyy-MM-dd")"
                                                            data-fechafin="@empleado.FechaFin.ToString("yyyy-MM-dd")"
                                                            data-numerodias="@empleado.NumeroDiasSolicitados"
                                                            data-estado="@empleado.EstadoSolicitud"
                                                            data-diasaprobados="@empleado.DiasAprobados"
                                                            data-comentarios="@empleado.ComentariosAprobador"
                                                            onclick="openModal(this)">
                                                        Actualizar Estado
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
                <section class="col-lg-6 connectedSortable">
                    <div class="card">
                        <div class="card-header border-0">
                            <h3 class="card-title">Solicitud de Nomina</h3>
                        </div>
                        <div class="card-body table-responsive p-0">
                            <table class="table table-striped table-valign-middle">
                                <thead>
                                    <tr>
                                        <th style="display: none;">IdNomina</th>
                                        <th>Periodo Fiscal</th>
                                        <th>Mes</th>
                                        <th>Fecha de Pago</th>
                                        <th>Pago Neto</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model == null || !Model.NominaAprovacion.Any())
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center">No hay datos disponibles</td>
                                        </tr>
                                    }
                                    else
                                    {
                                        @foreach (var nomina in Model.NominaAprovacion)
                                        {
                                            <tr>
                                                <td style="display: none;">@Html.DisplayFor(modelItem => nomina.IdNomina)</td>
                                                <td>@Html.DisplayFor(modelItem => nomina.PeriodoFiscal)</td>
                                                <td>@Html.DisplayFor(modelItem => nomina.Mes)</td>
                                                <td>@Html.DisplayFor(modelItem => nomina.FechaPago)</td>
                                                <td>@Html.DisplayFor(modelItem => nomina.PagoNeto)</td>
                                                <td>
                                                    <button class="btn btn-primary btn-sm"
                                                            data-idnomina="@nomina.IdNomina"
                                                            data-periodofiscal="@nomina.PeriodoFiscal"
                                                            data-mes="@nomina.Mes"
                                                            data-fechapago="@nomina.FechaPago.ToString("yyyy-MM-dd")"
                                                            data-pagoneto="@nomina.PagoNeto"
                                                            data-estadonomina="@nomina.EstadoNomina"
                                                            data-comentarios="@nomina.ComentariosAprobador"
                                                            onclick="openNominaModal(this)">
                                                        Actualizar Estado
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </section>
            </div>
            <div class="row">
               
                <div class="col-md-12">
                    <div class="card card-custom card-outline">
                        <div class="card-header">
                            <h3 class="card-title">

                                Accesos Directos
                            </h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                            </div>
                        </div>

                        <ul class="icon-list">
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="Nomina" asp-action="Index">
                                        <i class="fas fa-money-check-alt fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Nomina</span>
                                </div>
                            </li>
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="VacacionDetall" asp-action="Index">
                                        <i class="fas fa-plane fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Solicitud de Vacaciones</span>
                                </div>
                            </li>
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="EmpleadoIngreso" asp-action="Index">
                                        <i class="fas fa-file-invoice-dollar fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Ingresos</span>
                                </div>
                            </li>
                            <li class="icon-container">
                                <div class="icon-wrapper">
                                    <a asp-controller="EmpleadoImpuesto" asp-action="Index">
                                        <i class="fas fa-minus-circle fa-4x icon-custom-color"></i>
                                    </a>
                                    <span class="users-list-name">Deducciones</span>
                                </div>
                            </li>
                        </ul>

                        <!-- /.users-list -->
                    </div>

                </div>
                <!-- Modal Nomina-->         
                @Html.AntiForgeryToken()
                <div class="modal fade" id="updateNominaStatusModal" tabindex="-1" role="dialog" aria-labelledby="updateNominaStatusModalLabel" aria-hidden="true">
                    <div class="modal-dialog" role="document">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="updateNominaStatusModalLabel">Actualizar Estado</h5>
                                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                    <span aria-hidden="true">&times;</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <form id="updateNominaStatusForm">
                                    <input type="hidden" id="modalIdNomina" name="IdNomina" />
                                    <div class="form-group">
                                        <label for="modalPeriodoFiscal">Periodo Fiscal</label>
                                        <input type="text" class="form-control" id="modalPeriodoFiscal" name="PeriodoFiscal" readonly />
                                    </div>
                                    <div class="form-group">
                                        <label for="modalMes">Mes</label>
                                        <input type="text" class="form-control" id="modalMes" name="Mes" readonly />
                                    </div>
                                    <div class="form-group">
                                        <label for="modalFechaPago">Fecha de Pago</label>
                                        <input type="text" class="form-control" id="modalFechaPago" name="FechaPago" readonly />
                                    </div>
                                    <div class="form-group">
                                        <label for="modalPagoNeto">Pago Neto</label>
                                        <input type="text" class="form-control" id="modalPagoNeto" name="PagoNeto" readonly />
                                    </div>
                                    <div class="form-group">
                                        <label for="modalEstadoNomina">Estado</label>
                                        <select class="form-control select2bs4 select2bs4 is-invalid" id="estadoNomina" name="EstadoNomina" required>
                                            <option value=""></option>                                          
                                            <option value="3">Aprobada</option>
                                            <option value="4">Rechazada</option>
                                            
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <label for="modalComentarios">Comentarios</label>
                                        <textarea class="form-control" id="modalComentarios" name="ComentariosAprobador"></textarea>
                                    </div>
                                </form>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                                <button type="button" class="btn btn-primary" onclick="updateNominaStatus()">Guardar cambios</button>
                            </div>
                        </div>
                    </div>
                </div>
     

            </div>
            <div class="row">
                <!-- LINE CHART -->
                <section class="col-lg-6 connectedSortable">
                    <div class="card card-info">
                        <div class="card-header">
                            <h3 class="card-title">Evolución del Pago Neto</h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <button type="button" class="btn btn-tool" data-card-widget="remove">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="chart" id="lineChartContainer">
                                <canvas id="lineChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                            </div>
                        </div>
                    </div>
                </section>
                <section class="col-lg-6 connectedSortable">
                    <!-- STACKED BAR CHART -->
                    <div class="card card-success">
                        <div class="card-header">
                            <h3 class="card-title">Gráfico de Nóminas Mensuales</h3>
                            <div class="card-tools">
                                <button type="button" class="btn btn-tool" data-card-widget="collapse">
                                    <i class="fas fa-minus"></i>
                                </button>
                                <button type="button" class="btn btn-tool" data-card-widget="remove">
                                    <i class="fas fa-times"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body">
                            <div class="chart" id="barChartContainer">
                                <canvas id="barChart" style="min-height: 250px; height: 250px; max-height: 250px; max-width: 100%;"></canvas>
                                
                            </div>
                        </div>
                        <!-- /.card-body -->
                    </div>
                    <!-- /.card -->
                </section>
            </div>
        </div>

        <!-- Modal Solicitud--> 
        @Html.AntiForgeryToken()
        <div class="modal fade" id="updateStatusModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Actualizar Estado de Vacación</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <form id="updateStatusForm">
                          
                            <input type="text" class="form-control" id="idvacacion" hidden readonly>
                            <div class="form-group">
                                <label for="employeeName">Nombre del Empleado</label>
                                <input type="text" class="form-control" id="employeeName" readonly>
                            </div>
                            <div class="form-group">
                                <label for="vacationStart">Fecha de Inicio</label>
                                <input type="text" class="form-control" id="vacationStart" readonly>
                            </div>
                            <div class="form-group">
                                <label for="vacationEnd">Fecha de Fin</label>
                                <input type="text" class="form-control" id="vacationEnd" readonly>
                            </div>
                            <div class="form-group">
                                <label for="vacationDays">Número de Días Solicitados</label>
                                <input type="text" class="form-control" id="vacationDays" readonly>
                            </div>
                            <div class="form-group">
                                <label for="vacationStatus">Estado de Vacación</label>
                                <select class="form-control select2bs4 is-invalid" id="vacationStatus" required>
                                    <option></option>
                                    <option value="Aprobada">Aprobada</option>
                                    <option value="Rechazada">Rechazada</option>
                                </select>                              
                            </div>
                            <div class="form-group">
                                <label for="DiasAprobados">Aprobar Dias</label>
                                <input asp-for="DiasAprobados" id="DiasAprobados" type="number" class="form-control"  required/>
                            </div>
                            <div class="form-group">
                                <label for="ComentariosAprobador">Comentarios del Aprobador</label>
                                <input asp-for="ComentariosAprobador" class="form-control"  />
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                        <button type="button" class="btn btn-primary" onclick="updateStatus()">Guardar Cambios</button>
                    </div>
                </div>
            </div>
        </div>



    </section>
</div>


<!-- jQuery -->
<script src="~/plugins/jquery/jquery.min.js"></script>
<!-- Bootstrap 4 -->
<script src="~/plugins/bootstrap/js/bootstrap.bundle.min.js"></script>
<script src="~/plugins/chart.js/Chart.min.js"></script>


@section scripts {         
    <script>
       

        function openModal(button) {
            // Obtiene los datos del botón
            var idvacacion = $(button).data('idvacacion');
            var vacacionId = $(button).data('id');
            var nombreCompleto = $(button).data('nombre');
            var fechaInicio = $(button).data('fechainicio');
            var fechaFin = $(button).data('fechafin');
            var numeroDiasSolicitados = $(button).data('numerodias');
            var estadoVacacion = $(button).data('estado');
            var diasAprobados = $(button).data('diasaprobados');
            var comentariosAprobador = $(button).data('comentarios');

            // Llena el modal con los datos obtenidos
            $('#idvacacion').val(idvacacion);
            $('#employeeName').val(nombreCompleto);
            $('#vacationStart').val(fechaInicio);
            $('#vacationEnd').val(fechaFin);
            $('#vacationDays').val(numeroDiasSolicitados);
            $('#vacationStatus').val(estadoVacacion);
            $('#DiasAprobados').val(diasAprobados);
            $('#ComentariosAprobador').val(comentariosAprobador);

            // Añade el ID de la vacación al formulario para uso posterior
            $('#updateStatusForm').data('vacacionId', vacacionId);

            // Muestra el modal
            $('#updateStatusModal').modal('show');
        }

        function validateForm() {
    var status = $('#vacationStatus').val();
    var diasAprobados = $('#DiasAprobados').val();
    
    var isValid = true;

    if (!status) {
        $('#vacationStatus').addClass('is-invalid');
        isValid = false;
    } else {
        $('#vacationStatus').removeClass('is-invalid');
    }

    if (!diasAprobados) {
        $('#DiasAprobados').addClass('is-invalid');
        isValid = false;
    } else {
        $('#DiasAprobados').removeClass('is-invalid');
    }

    return isValid;
}

        function updateStatus() {
            if (!validateForm()) {
                toastr.error('Los campos requeridos estan en rojo');
                return;
            }
            // Obtener los datos del formulario
            var vacacionId = $('#updateStatusForm').data('vacacionId');
            var idvacacion = $('#idvacacion').val();
            var status = $('#vacationStatus').val();
            var diasAprobados = $('#DiasAprobados').val();
            var comentariosAprobador = $('#ComentariosAprobador').val();
            var token = $('input[name="__RequestVerificationToken"]').val();

            // Crear objeto de datos
            var data = {
                IdVacacionDetalle: vacacionId,
                EstadoSolicitud: status,
                DiasAprobados: diasAprobados,
                ComentariosAprobador: comentariosAprobador,
                __RequestVerificationToken: token
            };

            // Llamada AJAX para actualizar el estado de la vacación
            $.ajax({
                url: '@Url.Action("ActualizarEstadoSolicitud", "Home")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                headers: {
                    'RequestVerificationToken': token
                },
                success: function (response) {
                    if (response.success) {
                        // Oculta el modal
                        $('#updateStatusModal').modal('hide');

                        // Si el estado es "Aprobada", llamar a comprobarPeriodoVacacional
                        if (status === "Aprobada") {
                            comprobarPeriodoVacacional(vacacionId, diasAprobados, idvacacion);
                        } else {
                            toastr.success('Solicitud de Petición Rechazada Correctamente.');
                            location.reload(); // Recarga la página para actualizar los datos
                        }
                    } else {
                        toastr.error('No se pudo actualizar el estado de la vacación: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.log("Error:", error);
                    toastr.error('Error al actualizar el estado de la vacación: ' + error);
                }
            });
        }

        function comprobarPeriodoVacacional(vacacionId, diasAprobados, idvacacion) {
            $.ajax({
                url: '@Url.Action("ComprobarPeriodoVacacional", "Home")',
                type: 'GET',
                data: { id: vacacionId, diasAprobados: diasAprobados, idvacacion: idvacacion },
                success: function (response) {
                    if (response.success) {
                        toastr.success('Solicitud de Petición Aprobada Correctamente.');
                        location.reload(); // Recarga la página para actualizar los datos
                    } else {
                        toastr.error('Error al comprobar el periodo vacacional: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.log("Error:", error);
                    toastr.error('Error al comprobar el periodo vacacional: ' + error);
                }
            });
        }

        ////Nomina////////////////
        function openNominaModal(button) {
            var idNomina = $(button).data('idnomina');
            var periodoFiscal = $(button).data('periodofiscal');
            var mes = $(button).data('mes');
            var fechaPago = $(button).data('fechapago');
            var pagoNeto = $(button).data('pagoneto');
            var estadoNomina = $(button).data('estadonomina');
            var comentarios = $(button).data('comentarios');

            $('#modalIdNomina').val(idNomina);
            $('#modalPeriodoFiscal').val(periodoFiscal);
            $('#modalMes').val(mes);
            $('#modalFechaPago').val(fechaPago);
            $('#modalPagoNeto').val(pagoNeto);
            $('#estadoNomina').val(estadoNomina);
            $('#modalComentarios').val(comentarios);

            $('#updateNominaStatusModal').modal('show');
        }

        function validateNominaForm() {
            var estadoNomina = $('#estadoNomina').val();
            var isValid = true;

            if (!estadoNomina) {
                $('#estadoNomina').addClass('is-invalid');
                isValid = false;
            } else {
                $('#estadoNomina').removeClass('is-invalid');
            }

            return isValid;
        }

        function updateNominaStatus() {
            if (!validateNominaForm()) {
                toastr.error('Los campos requeridos están en rojo');
                return;
            }

            var idNomina = $('#modalIdNomina').val();
            var estadoNomina = $('#estadoNomina').val();
            var comentariosAprobador = $('#modalComentarios').val();
            var token = $('input[name="__RequestVerificationToken"]').val();

            var data = {
                IdNomina: idNomina,
                EstadoNomina: parseInt(estadoNomina),
                ComentariosAprobador: comentariosAprobador,
                __RequestVerificationToken: token
            };

            $.ajax({
                url: '@Url.Action("ActualizarEstadoNomina", "Home")',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(data),
                headers: {
                    'RequestVerificationToken': token
                },
                success: function (response) {
                    if (response.success) {
                        $('#updateNominaStatusModal').modal('hide');
                        toastr.success('Estado de la nómina actualizado correctamente.');
                        location.reload();
                    } else {
                        toastr.error('No se pudo actualizar el estado de la nómina: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.log("Error:", error);
                    toastr.error('Error al actualizar el estado de la nómina: ' + error);
                }
            });
        }


        $(function () {
            var hasNominasData = @hasNominasData.ToString().ToLower();
            console.log("hasNominasData:", hasNominasData);

            if (hasNominasData) {
                var nominasData = @Html.Raw(JsonConvert.SerializeObject(ViewBag.NominasData));
                console.log("nominasData:", nominasData);

                // Función para convertir el número del mes al nombre del mes
                function getMonthName(monthNumber) {
                    const monthNames = [
                        "Enero", "Febrero", "Marzo", "Abril", "Mayo", "Junio",
                        "Julio", "Agosto", "Septiembre", "Octubre", "Noviembre", "Diciembre"
                    ];
                    return monthNames[monthNumber - 1];
                }

                var labels = nominasData.map(function (item) { return getMonthName(item.Mes); });
                var totalIngresos = nominasData.map(function (item) { return item.TotalIngresosCharts; });
                var totalDeducciones = nominasData.map(function (item) { return item.TotalDeduccionesCharts; });
                var totalImpuestos = nominasData.map(function (item) { return item.TotalImpuestosCharts; });
                var pagoNeto = nominasData.map(function (item) { return item.PagoNetoCharts; });

                console.log("labels:", labels);
                console.log("totalIngresos:", totalIngresos);
                console.log("totalDeducciones:", totalDeducciones);
                console.log("totalImpuestos:", totalImpuestos);
                console.log("pagoNeto:", pagoNeto);

                var stackedBarChartCanvas = $('#barChart').get(0).getContext('2d');
                var stackedBarChartData = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Total Ingresos',
                            backgroundColor: 'rgba(60,141,188,0.9)',
                            borderColor: 'rgba(60,141,188,0.8)',
                            pointRadius: false,
                            pointColor: '#3b8bba',
                            pointStrokeColor: 'rgba(60,141,188,1)',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: 'rgba(60,141,188,1)',
                            data: totalIngresos
                        },
                        {
                            label: 'Total Deducciones',
                            backgroundColor: 'rgba(210, 214, 222, 1)',
                            borderColor: 'rgba(210, 214, 222, 1)',
                            pointRadius: false,
                            pointColor: 'rgba(210, 214, 222, 1)',
                            pointStrokeColor: '#c1c7d1',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: 'rgba(220,220,220,1)',
                            data: totalDeducciones
                        },
                        {
                            label: 'Total Impuestos',
                            backgroundColor: 'rgba(0, 123, 255, 0.9)',
                            borderColor: 'rgba(0, 123, 255, 0.8)',
                            pointRadius: false,
                            pointColor: 'rgba(0, 123, 255, 1)',
                            pointStrokeColor: '#007bff',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: 'rgba(0, 123, 255, 1)',
                            data: totalImpuestos
                        },
                        {
                            label: 'Pago Neto',
                            backgroundColor: 'rgba(40, 167, 69, 0.9)',
                            borderColor: 'rgba(40, 167, 69, 0.8)',
                            pointRadius: false,
                            pointColor: 'rgba(40, 167, 69, 1)',
                            pointStrokeColor: '#28a745',
                            pointHighlightFill: '#fff',
                            pointHighlightStroke: 'rgba(40, 167, 69, 1)',
                            data: pagoNeto
                        }
                    ]
                };

                var stackedBarChartOptions = {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            stacked: true,
                        },
                        y: {
                            stacked: true,
                            ticks: {
                                callback: function (value) {
                                    return value.toLocaleString(); // Format number with thousand separators
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    label += context.raw.toLocaleString(); // Format number with thousand separators
                                    return label;
                                }
                            }
                        }
                    }
                };

                new Chart(stackedBarChartCanvas, {
                    type: 'bar',
                    data: stackedBarChartData,
                    options: stackedBarChartOptions
                });

                var lineChartCanvas = $('#lineChart').get(0).getContext('2d');
                var lineChartData = {
                    labels: labels,
                    datasets: [
                        {
                            label: 'Pago Neto',
                            borderColor: 'rgba(40, 167, 69, 1)',
                            pointBackgroundColor: 'rgba(40, 167, 69, 1)',
                            pointBorderColor: '#28a745',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(40, 167, 69, 1)',
                            data: pagoNeto,
                            fill: false
                        }
                    ]
                };

                var lineChartOptions = {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            ticks: {
                                callback: function (value) {
                                    return value.toLocaleString(); // Format number with thousand separators
                                }
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function (context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    label += context.raw.toLocaleString(); // Format number with thousand separators
                                    return label;
                                }
                            }
                        }
                    }
                };

                new Chart(lineChartCanvas, {
                    type: 'line',
                    data: lineChartData,
                    options: lineChartOptions
                });

            } else {
                // Mostrar un mensaje cuando no hay información
                $('#barChartContainer').html('<div role="alert">No hay datos disponibles para mostrar.</div>');
                $('#lineChartContainer').html('<div role="alert">No hay datos disponibles para mostrar.</div>');
            }
        });




    </script>



}
