@model IEnumerable<PlanillaPM.Models.ImpuestoTabla>
@* <style>
    .hidden-col {
        display: none;
    }
</style> *@



<div class="modal-header">
    <h4 class="modal-title">Editar Tabla de Impuestos</h4>
    <button class="btn btn-info" id="add"><span class="glyphicon glyphicon-plus-sign"></span>Agregar Nuevo Elemento</button>
</div>

<div class="modal-body">
    <!-- Campos para editar ImpuestoTabla -->
   @*  <input type="hidden" asp-for="IdImpuesto" value="@Model.IdImpuesto" />
    <input type="hidden" asp-for="IdImpuestoTabla" value="@Model.IdImpuestoTabla" /> *@

    <form asp-controller="ImpuestoTabla" asp-action="Edit" method="post">
        <div id="resultados" class="table-responsive table-striped table-sm ">
            <table class="table table-striped projects " cellspacing="0" data-toggle="table" id="table-list">
                <thead class="thead-light">
                    <tr>
                        <th data-field="IdImpuestoTabla">@Html.DisplayNameFor(model => model.IdImpuestoTabla)</th>
                        <th data-field="IdImpuesto">@Html.DisplayNameFor(model => model.IdImpuesto)</th>
                        <th data-field="Desde">@Html.DisplayNameFor(model => model.Desde)</th>
                        <th data-field="Hasta">@Html.DisplayNameFor(model => model.Hasta)</th>
                        <th data-field="Monto">@Html.DisplayNameFor(model => model.Monto)</th>
                        <th data-field="Porcentaje">@Html.DisplayNameFor(model => model.Porcentaje)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {

                        <tr>
                            <td data-field="IdImpuestoTabla" id="idImpuestoTabla" class="readonly">@item.IdImpuestoTabla</td>
                            <td data-field="IdImpuesto" class="readonly">@item.IdImpuesto</td>
                            <td data-field="Desde">@item.Desde</td>
                            <td data-field="Hasta">@item.Hasta</td>
                            <td data-field="Monto">@item.Monto</td>
                            <td data-field="Porcentaje">@item.Porcentaje</td>

                        </tr>
                    }
                </tbody>
            </table>

        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Cerrar</button>
            <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        </div>
    </form>
</div>



<script>
    "use strict";
    //Global variables
    var params = null;
    var colsEdi = null;
    var newColHtml = '<div class="btn-group pull-right">' +
        '<button id="bEdit" type="button" class="btn btn-sm btn-default" onclick="rowEdit(this);">' +
        '<i class="fas fa-pencil-alt"></i>' +
        '</button>' +
        '<button id="bElim" type="button" class="btn btn-sm btn-default" onclick="rowElim(this);">' +
        '<i class="fas fa-trash"></i>' +
        '</button>' +
        '<button id="bAcep" type="button" class="btn btn-sm btn-default" style="display:none;" onclick="rowAcep(this);">' +
        '<i class="fas fa-check"></i>' +
        '</button>' +
        '<button id="bCanc" type="button" class="btn btn-sm btn-default" style="display:none;" onclick="rowCancel(this);">' +
        '<i class="fas fa-times"></i>' +
        '</button>' +
        '</div>';

    var colEdicHtml = '<td name="buttons">' + newColHtml + '</td>';

    $.fn.SetEditable = function (options) {
        var defaults = {
            columnsEd: "2,3,5,6",     //Index to editable columns. If null all td editables. Ex.: "1,2,3,4,5"
            $addButton: null,        //Jquery object of "Add" button
            onEdit: function () { },   //Called after edition
            onBeforeDelete: function () { }, //Called before deletion
            onDelete: function () { }, //Called after deletion
            onAdd: function () { }     //Called when added a new row
        };
        params = $.extend(defaults, options);
        this.find('thead tr').append('<th name="buttons">Acciones</th>');
        this.find('tbody tr').append(colEdicHtml);
        var $tabedi = this;   //Read reference to the current table, to resolve "this" here.
        //Process "addButton" parameter
        if (params.$addButton != null) {
            //Se proporcionó parámetro
            params.$addButton.click(function () {
                rowAddNew($tabedi.attr("id"));
            });
        }
        //Process "columnsEd" parameter
        if (params.columnsEd != null) {
            //Extract fields
            colsEdi = params.columnsEd.split(',');
        }
    };

    function IterarCamposEdit($cols, tarea) {
        var n = 0;
        $cols.each(function () {
            n++;
            if ($(this).attr('name') == 'buttons') return;  //excluye columna de botones
            if (!EsEditable(n - 1)) return;   //no es campo editable
            tarea($(this));
        });

        function EsEditable(idx) {
            if (colsEdi == null) {  //no se definió
                return true;  //todas son editables
            } else {  //hay filtro de campos
                for (var i = 0; i < colsEdi.length; i++) {
                    if (idx == colsEdi[i]) return true;
                }
                return false;  //no se encontró
            }
        }
    }

 

    function FijModoNormal(but) {
        $(but).parent().find('#bAcep').hide();
        $(but).parent().find('#bCanc').hide();
        $(but).parent().find('#bEdit').show();
        $(but).parent().find('#bElim').show();
        var $row = $(but).parents('tr');  //accede a la fila
        $row.attr('id', '');  //quita marca
    }

    function FijModoEdit(but) {
        $(but).parent().find('#bAcep').show();
        $(but).parent().find('#bCanc').show();
        $(but).parent().find('#bEdit').hide();
        $(but).parent().find('#bElim').hide();
        var $row = $(but).parents('tr');  //accede a la fila
        $row.attr('id', 'editing');  //indica que está en edición
    }

    function ModoEdicion($row) {
        return $row.attr('id') == 'editing';
    }


    function rowAcep(but) {
        // Acepta los cambios de la edición
        var $row = $(but).parents('tr');  // accede a la fila
        var $cols = $row.find('td');  // lee campos
        if (!ModoEdicion($row)) return;  // Ya está en edición
        var rowData = [];
        // Está en edición. Hay que finalizar la edición
        IterarCamposEdit($cols, function ($td) {  // itera por las columnas
            var cont = $td.find('input').val(); // lee contenido del input
            $td.html(cont);  // fija contenido y elimina controles
            rowData.push(cont);
        });
        console.log('Datos de la fila:', rowData);

        var rowData2 = [];

        $row.find('td').each(function () {
            var cellContent = $(this).text();
            if (cellContent.trim() !== '') { // Verifica si la celda no está vacía
                rowData2.push(cellContent);
            }
        });
        enviarDatos(rowData2);
        FijModoNormal(but);
        params.onEdit($row);
    }
  

    function enviarDatos(rowData2) {
        // Crear un objeto con los datos de la fila
        const data = {
            IdImpuestoTabla: rowData2[0],
            IdImpuesto: rowData2[1],
            Desde: rowData2[2],
            Hasta: rowData2[3],
            Monto: rowData2[4],
            Porcentaje: rowData2[5]
        };
        //escribir en la consola los valores a enviar
        console.log('Datos a enviar:', data);
         
        $.ajax({
            url: "/ImpuestoTabla/CreateEdit",
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(data),
            headers: {
                'RequestVerificationToken': $('input:hidden[name="__RequestVerificationToken"]').val()
            },
            success: function (response) {
                console.log('Éxito:', response);
                // Puedes agregar más lógica aquí para manejar la respuesta exitosa
            },
            error: function (xhr, status, error) {
                console.log('Error:', error);
                console.log('Estado:', status);
                console.log('Respuesta del servidor:', xhr.responseText);
            }
        });
    }

    function rowCancel(but) {
        var $row = $(but).parents('tr');  //accede a la fila
        var $cols = $row.find('td');  //lee campos
        if (!ModoEdicion($row)) return;  //Ya está en edición
        IterarCamposEdit($cols, function ($td) {
            var cont = $td.find('div').html(); //lee contenido del div
            $td.html(cont);  //fija contenido y elimina controles
        });
        FijModoNormal(but);
    }

    function rowEdit(but) {  //Inicia la edición de una fila
        var $row = $(but).parents('tr');  //accede a la fila
        var $cols = $row.find('td');  //lee campos
        if (ModoEdicion($row)) return;  //Ya está en edición
        IterarCamposEdit($cols, function ($td) {
            var cont = $td.html(); //lee contenido
            var div = '<div style="display: none;">' + cont + '</div>';  //guarda contenido
            var input = '<input class="form-control input-sm" name="' + $td.attr('data-field') + '" value="' + cont + '">';
            $td.html(div + input);  //fija contenido
        });
        FijModoEdit(but);
    }

    function rowElim(but) {  //Elimina la fila actual
        var $row = $(but).parents('tr');  //accede a la fila
        params.onBeforeDelete($row);
        var $cols = $row.find('td');

        var rowData2 = [];

        $row.find('td').each(function () {
            var cellContent = $(this).text();
            if (cellContent.trim() !== '') { // Verifica si la celda no está vacía
                rowData2.push(cellContent);
            }
        });
      
        const data = {
            IdImpuestoTabla: rowData2[0],
            IdImpuesto: rowData2[1],
            Desde: rowData2[2],
            Hasta: rowData2[3],
            Monto: rowData2[4],
            Porcentaje: rowData2[5]
        };

        if (confirm('¿Está seguro que desea eliminar este registro?')) {
            $.ajax({
                url: "/ImpuestoTabla/DeleteConfirmed",
                contentType: 'application/json',
                type: 'POST',
                data: JSON.stringify(data),
                headers: {
                    'RequestVerificationToken': $('input:hidden[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        alert('El registro ha sido eliminado exitosamente.');
                    } else {
                        alert('Error: ' + response.error);``
                    }
                },
                error: function (xhr, status, error) {
                    alert('Error: ' + error);
                }
            });
        }

        $row.remove();
        params.onDelete();
    }


    function rowAddNew(tabId) {
        var $tab_en_edic = $("#" + tabId);
        var $filas = $tab_en_edic.find('tbody tr');

        if ($filas.length == 0) {
            // Si no hay filas, crea una fila nueva con estructura vacía
            var $row = $tab_en_edic.find('thead tr');
            var $cols = $row.find('th');
            var htmlDat = '';

            $cols.each(function () {
                if ($(this).attr('name') == 'buttons') {
                    htmlDat = htmlDat + colEdicHtml;
                } else {
                    htmlDat = htmlDat + '<td data-field="' + $(this).attr('data-field') + '"></td>';
                }
            });

            $tab_en_edic.find('tbody').append('<tr>' + htmlDat + '</tr>');
        } else {
            // Clona la última fila
            var $ultFila = $tab_en_edic.find('tbody tr:last');
            var $nuevaFila = $ultFila.clone();

            $nuevaFila.find('td').each(function () {
                var field = $(this).attr('data-field');  // Usa .attr() en lugar de .data()
                if ($(this).attr('name') != 'buttons') {
                    switch (field) {
                        case 'IdImpuestoTabla':
                            $(this).html('0');  // Deja "IdImpuestoTabla" vacío
                            break;
                        case 'Monto':
                            $(this).html('0.00');  // Pone "Monto" en 0
                            break;
                        case 'Desde':
                            var desdeValue = $ultFila.find('td[data-field="Hasta"]').html();
                            $(this).html(desdeValue);  // "Hasta" toma el valor de "Desde"
                            break;
                        case 'Hasta':
                            $(this).html('');
                            break;
                        case 'Porcentaje':
                            $(this).html('');
                            break;
                        default:
                            var originalContent = $ultFila.find('td[data-field="' + field + '"]').html();
                            $(this).html(originalContent);  // Mantén el contenido original para otros campos
                            break;
                    }
                }
            });

            // Agrega la nueva fila a la tabla
            $tab_en_edic.find('tbody').append($nuevaFila);
        }

        params.onAdd();
        return false;  // Evita el comportamiento predeterminado del botón
    }


    function TableToCSV(tabId, separator) {  //Convierte tabla a CSV
        var datFil = '';
        var tmp = '';
        var $tab_en_edic = $("#" + tabId);  //Table source
        $tab_en_edic.find('tbody tr').each(function () {
            if (ModoEdicion($(this))) {
                $(this).find('#bAcep').click();  //acepta edición
            }
            var $cols = $(this).find('td');  //lee campos
            datFil = '';
            $cols.each(function () {
                if ($(this).attr('name') == 'buttons') {
                    //Es columna de botones
                } else {
                    datFil = datFil + $(this).html() + separator;
                }
            });
            if (datFil != '') {
                datFil = datFil.substr(0, datFil.length - separator.length);
            }
            tmp = tmp + datFil + '\n';
        });
        return tmp;
    }

    //apply
        $("#table-list").SetEditable({
            $addButton: $('#add')
        });
   
</script>


